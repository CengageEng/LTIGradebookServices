<?php
define('CLI_SCRIPT', true);
define('CACHE_DISABLE_ALL', true);
require(__DIR__.'/../../../../../config.php');
require_once($CFG->libdir.'/clilib.php');

if (!isset($DB)) {
    cli_error('$DB not defined');
}

$dbman = $DB->get_manager();
$table = new xmldb_table('ltiservice_gradebookservices');
if (!$dbman->field_exists($table, new xmldb_field('gradeitemid'))) {
    $backuptable_name = 'ltiservice_gradebookservices_bak';
    $backuptable = new xmldb_table($backuptable_name);
    if ($dbman->table_exists($backuptable)) {
        $dbman->drop_table($backuptable);
    }
    $dbman->rename_table($table, $backuptable_name, $continue=true, $feedback=true);
    // Generated by XMLDB Editor from 3.5 Schema
    // Define table ltiservice_gradebookservices to be created.
    // Adding fields to table ltiservice_gradebookservices.
    $table->add_field('id', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, XMLDB_SEQUENCE, null);
    $table->add_field('gradeitemid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
    $table->add_field('courseid', XMLDB_TYPE_INTEGER, '10', null, XMLDB_NOTNULL, null, null);
    $table->add_field('toolproxyid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);
    $table->add_field('typeid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);
    $table->add_field('baseurl', XMLDB_TYPE_TEXT, null, null, null, null, null);
    $table->add_field('ltilinkid', XMLDB_TYPE_INTEGER, '10', null, null, null, null);
    $table->add_field('tag', XMLDB_TYPE_CHAR, '255', null, null, null, null);

    // Adding keys to table ltiservice_gradebookservices.
    $table->add_key('primary', XMLDB_KEY_PRIMARY, array('id'));
    $table->add_key('ltilinkid', XMLDB_KEY_FOREIGN, array('ltilinkid'), 'lti', array('id'));
    $table->add_key('itemnumbercourse', XMLDB_KEY_FOREIGN, array('gradeitemid', 'courseid'), 'grade_items', array('id', 'courseid'));

    // Conditionally launch create table for ltiservice_gradebookservices.
    if (!$dbman->table_exists($table)) {
        $dbman->create_table($table);
    }
    // End of generated code

    // Now let's migrate data from original plugin table to the new table
    $DB->execute("insert into {ltiservice_gradebookservices} 
                    (gradeitemid, courseid, toolproxyid, ltilinkid, tag)
                    (SELECT gi.id, gi.courseid, gbs.toolproxyid, gbs.resourcelinkid, gbs.tag
                        FROM {ltiservice_gradebookservices_bak} gbs
                        INNER JOIN {grade_items} gi ON gbs.id=gi.itemnumber)");

    
    // Make the grade item manual
    $DB->execute("update {grade_items} set itemtype='manual', itemmodule=null, itemnumber=0 
                  where id in (select gradeitemid from {ltiservice_gradebookservices})");
    
    // remove the original table
    $dbman->drop_table($backuptable);

    cli_writeln('Migration completed');
} else {
    cli_writeln('Already migrated.');
}
exit(0);
